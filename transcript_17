
Search our transcripts by guest or keyword
COMPANY
Careers
Blog
Shows
Sponsors
Newsletter
About Us
Sitemap
LEGAL
Disclaimer
Privacy Policy
Terms and Conditions
SOCIAL
LinkedIn
Twitter
® 2022 Colossus, LLC. All rights reserved.
Released June 6th, 2022
Invest Like the Best
Martin Casado - The Past, Present, and Future of Digital Infrastructure
Martin Casado is a general partner at Andreessen Horowitz. We cover the state of the digital infrastructure industry today, what modern data stacks and developer-facing companies look like, and what he’s most excited about that digital infrastructure might unlock in the future.

00:00:00
00:54:09
Introduction
[00:02:10] Patrick: My guest today is Martin Casado. Martin is a general partner at Andreessen Horowitz, where he focuses on digital infrastructure. Before joining a16z, Martin pioneered software defined networking and co-founded Nicira, which was bought by VMware for $1.3 billion in 2012. Martin has studied, built and invested in digital infrastructure his whole career, and is the perfect person to discuss the most interesting aspects of the industry. Please enjoy this great conversation with Martin Casado.

The State of Digital Infrastructure
[00:02:39] Patrick: So Martin, I think we might call this episode, the past, present, and future of digital infrastructure, which is the world that lives beneath all the stuff we all spend all our days using, and probably almost no one's ever really thought about, but represents enormous markets in terms of revenue, market cap. People have heard of things like AWS, et cetera. I'd love to begin by you giving us a state of the union of digital infrastructure today. The major aspects of it that you think are more important. I like starting in the present, then maybe we'll jump to the past. But if you had to describe this to a new initiate into this part of the business world, how would you describe it and its importance?

[00:03:16] Martin: The primary narrative for the last decade has been the cloud. You have basically an oligopoly of three providers, Microsoft, Google, and AWS. They provide all of IT, which used to be provided by central IT teams. It used to be the case that you would have these IT teams and they'd rack servers, they'd provide services, and now this stuff's just available online. And not only is the compute, the storage and network, which are traditional infrastructure, but higher level services on top of those. Today, if you're going to build an app, you don't have to know a lot about infrastructure. You don't have to rack servers, you don't have to know about how to build a database. You just use those and then you focus more on the business logic.

[00:03:58] Patrick: How would you put chapter headers on the stages of cloud adoption, going back to, I think, Azure and AWS, are sort of mid-2000, 2005, 2006, thereabouts, relatively speaking, a short story. What do you think the major eras of the cloud story have been so far?

[00:04:15] Martin: Right before the cloud, of course, everybody ran their own internal IT. Right? And so they kind of write their own servers and their own wiring closets. The cloud showed up and the early usage was what you would typically find in a technology early adopter ecosystem. It's more new projects and startups and hobbyists, the average workloads were relatively small. There was exceptions to that of course, like Netflix is a very famous one, which went all in the cloud very early. But in general, that was what it was. This is like 2005-2010 timeframe and still was very experimental. A lot of the time there was big discussions on whether the enterprise would actually go into the cloud. When I ran network and security for VMware, which is 2012-2016 timeframe, I think that was the more mainstream adoption of the cloud. You saw large organizations, traditional enterprise moving workloads to the cloud, very serious discussion with the Fed and the government. It became a mainstream way of doing things. If you were a large organization and you didn't have a cloud strategy, I mean, you were either considered a laggard or a special case. That brings us to 2018-2019, and now we're seeing a shift where the move to the cloud has implications on your finances, because now instead of you being able to buy a physical asset and internalize that, you're basically paying a portion of your income to a third party.

Now there's a lot of discussions around, how do you optimize the use of cloud? Is the right thing to go all in on cloud? Is it something that you do a portion or whatever? I just want to make one quick analogy, which is, I always view companies going in three stages, the product stage, the sales or growth stage, and then the operation stage. The product stage you're finding product market fit. The sales stage is you're getting to repeatable sales and growth. You don't really worry too much about unit economics. And the operation stage is when you care about unit economics and you go into multiple products and you do all the operation of complex things. The cloud had gone through the exact same three phases, which first was trying to find product market fit, which tended to be within new projects, funding the projects. Then it went to the growth phase where everybody went all in and didn't worry about the implications to the economics of business. Now we're at the operations phase where we're starting rationalize all of that.

Case Studies on Public Cloud Computing
[00:06:26] Patrick: Maybe tell the story of Dropbox, which I think as an individual company, is a great example of cloud isn't just some panacea. It has incredible benefits in terms of how quickly you can get going, outsource the reliability to somebody else that's just focused on this, AWS or whatever. But from a cost standpoint, it can get really out of hand. I think Dropbox is a good and probably unfamiliar to most tale of going the other direction.

[00:06:49] Martin: There's basically two trends that happen at the same time. It's important to understand those two trends to understand what happened at Dropbox and actually a number of other companies too, it's not just Dropbox. The two trends are the following, the first one is cloud, which we talked about. The second trend is SaaS. And specifically what's unique to SaaS is, is before if you were a software vendor, you would build software and you'd ship software, and somebody else would run it on their own infrastructure. Your COGS, your cost of goods as a software vendor did not include the infrastructure that it was being run on, because it was being run on somebody else's infrastructure. For example, my startup, we built software for networking, we shipped it, other people would run it on their infrastructure. However, if your SaaS, if your product is software as a service, then part of your cost of goods is actually the infrastructure. Someone comes, says, "I've got a SaaS site and someone comes and uses it, then they pay me some, and then I pay say, AWS a portion of that." That is a change of cost structure. The books look very different.

While the cloud is getting adopted, all software is going from basically on-prem to SaaS, and in some cases, and there's many of these cases, it turned out that it was very tough to get software margins just because the cost of the cloud services on the backend was so high. The era of shipping software, we'd all say these companies have 80% margins because you basically write the code once and then it's free to copy bits, so you just ship it to everybody else. Especially in infrastructure, there's many companies that felt like they're basically reselling a thin layer on top of AWS or one of the big clouds, and then paying a large portion back to them. For example, I know multiple companies that are household names, where they've got product lines that have 0% margins because all of the money goes back to the cloud services it's hosted on. Dropbox very famously had this situation where S3, which is the storage layer on Amazon is not optimized for this use case of many small objects. They found that they were paying a tremendous amount. Now, they were a very large user of this specific use case. AWS was not optimized for it. They decided to build their own internal infrastructure and probably saved the company at the time, by moving off the cloud and taking it internally.

[00:09:03] Patrick: Literally what they did is built the equivalent of data centers or like an AWS. They were just building some series of places that had the same infrastructure, but they controlled and it was optimized for their use case.

[00:09:14] Martin: Dropbox is an often used example. It's a very specific use case and things to highlight is, there's a subset of the workload. Like, listen, if you're just doing a webpage, it doesn't make sense to do your own infrastructure. If you're adjusting some kind of vertical SaaS, that's not compute heavy, it doesn't. But many workloads, let's say if you're doing music serving, a lot of data intensive stuff, especially if you're one of the world's largest websites, then you may have a certain workload amongst all of your workloads where optimization really matters. This is the case of Dropbox. What they did is they noticed for the storage, that Amazon AWS was not optimized for their use case. It was a large compute workload. Then they built their own infrastructure to support that. Their own data centers, their own servers, and then their own software on the backend in order to do that. But again, it's not like the entire company moved over there. It was specific workloads that they moved over.

[00:10:08] Patrick: There was a really interesting thing that you wrote about the interesting concept of lost market cap of companies that were big users of the public clouds. I'd love you to walk through that concept, because you mentioned maybe this saved Dropbox, the company, and I get that that's a very special, specific case, but it sounds like there's a bigger story here of lost margin and therefore lost market cap because of the use of public cloud. I'd love you to walk us through that.

[00:10:32] Martin: We did this analysis, a very simple analysis, which we said, "Okay, right now there's a tremendous amount of money that SaaS companies spend on cloud." Let's say if they brought it inside and they were able to drop those costs by half, which most people agree that you can drop the costs by half by bringing it inside. If you could do that, what would that do to the stock price? Normally when people look at this problem, they say, "Well, if you bring this inside, yes, it'll save you money. You'll save 50%, but that money won't cover the team, the complexity, because that's not a lot of money." But if you look at the leverage that increase in margin does to the stock price, now you can free up for a large company, potentially a lot of money, which will flow over to cash, so it could be a big win.

What we learnt is that we looked at just public software companies. We looked at 50 of them. We looked at all of their spend and we said, "Let's assume you cut that spend in half." Then we calculated their margins. And then we said, "Benchmarking against other public companies, if their margins were half, what would that do to the stock price?" It turned out that it would increase in aggregate the stock price by $200 billion. Just a tremendously high number. I think we wrote $100 billion to be conservative in the actual blog post, but $200 billion. That means if you're a company that's say, worth $10 billion, and you can reduce your COGS by a bit, you could now become worth $14 billion, and then you have access to that for debt and hiring or whatever else. Because those two trends happened at the same time you had the cloud trend, as well as the SaaS trend, I don't think there had been a lot of focus on what it does to the margin structure. We did the first analysis and said, "Actually it's huge and it can impact your stock price." I do think, especially now in this market correction, it's a good thing for companies to start looking at.

[00:11:36] Patrick: I think Netflix was one of the very famous early adopters of this public cloud infrastructure. I love the evolution of product to sales to operations. It seems like right now, given what's happening in public equities at least, that every company is going to be looking for ways to save money. Do you think this becomes a huge headwind for the three public cloud providers, that everyone's going to say, "Wait a minute, if we can do that consolidation, this is the time to do it?"

[00:12:44] Martin: The three big cloud providers are going to continue to grow and continue to preserve margins. And the reason is the following, we're still in relatively early endings for the cloud and there's a lot of workloads that should be in the cloud that are not, that are going to continue to move there. I also think a lot of the companies that can benefit the most from these already have very much sweetheart pricing for historical reasons, so they've got a lot of pricing power. I think even if they do move certain workloads off the cloud, I don't think that the margin impact is going to be as significant, just because I don't feel like a lot of the margin comes from those.

By the way, there's one more trend I think that we should also talk about, which is, you had the cloud and then you had SaaS, but there's also been the evolution of things like Kubernetes or technologies that enable you to run on clouds, in between clouds, that's also matured. That's also matured to a point now that makes it easier for folks to run their own infrastructure and move between clouds. I do think we're at a point that companies will now have honest discussions, like, should portions of our workloads be run on third party clouds, on the big three, on our own infrastructure? They'll have that discussion. There is the technology for them to do it. There's enough proof points of it happening that they can have the discussion. And we'll start to see that optimization, but I don't think that the workloads that are going to be impacted, let's say in the next five years, are going to be the ones that are primary margin drivers for the big three. I really don't.

The Biggest Innovations This Cycle
[00:14:03] Patrick: Before we get to something like Kubernetes, a little bit more complicated of a topic, I'd love to just return to super basics around digital infrastructure in the first place. And maybe even go all the way back to the original AWS website, where I think it was storage, compute, database. You mentioned networking. What are the base level, most primitives of the digital world? What are the most important, big things that actually happen? Because I'd love to understand what's changed in those areas, like compute sounds like compute. What is changing in those three, four, five base level areas?

[00:14:33] Martin: The traditional infrastructure's computing and storage, and then databases. Prior to cloud, you'd buy a server from whatever, Dell or IBM or HP. You'd buy a switch from Juniper or Cisco. You'd buy a storage array from whoever, EMC. And databases from Oracle. So all those have now been, basically, collapsed into a software layer over basically merchant hardware in the cloud. So you can get the equivalent of just compute by TC2. You can get very flexible networking layers, where you can put security policies and that's largely implemented in software within the cloud. And then you get these scalable services, like the database services that are scalable because they're in the cloud. And so that's the bread and butter of the cloud.

For a cloud is basically you take these traditional abstractions, compute and storage, that were connected to a box and now they're just basically software services that you can spin up and they should be able to grow to the size of the workload. But what has also happened in the last say, five years is a number of services then built on top of those that are higher level abstractions. So for example, machine learning workflows, analytic workflows, different types of databases that focus on different types of query patterns. I want to do analytics, or I want to do LTP, or I want to do very fast queries or time series. We have seen this renaissance of infrastructure, again, which used to be tied to a box now being implemented as a software services in a way that's much faster than we've seen historically for that exact reason. That it's not confined to a box.

[00:15:59] Patrick: In terms of just like, what literally is happening in those three key original areas, how much innovation has there been? And maybe it's like a Moore's law question or something. How much has that evolved on a unit basis, and how can we expect it to continue to get better or evolve?

[00:16:15] Martin: I think we've entered somewhat of a dark ages for infrastructure innovation. And the reason I say that is just because it's become so consolidated into three companies who keep it so under wraps that the rest of the industry just doesn't enjoy it, or just doesn't have as much access to it. So, for example, when's the last time you saw big innovation in servers? You know, and I still think there's a lot of great work to do there. Just so dominated by the big three. The same thing I would say with networking. So much of this has been consolidated by the data centers and driven by that one vision. I think this stands to reason as you have this aggregation phase where like a few companies drive probably 50% of the infrastructure market. You know, just something enormous.

However what's happening is we hit this operations space like you and I spoke about. Users of the cloud are starting to evaluate, "Where can I get benefits that are outside of the cloud? Are there other, maybe not part of the big three companies that provide something interesting?" So we're just starting to see glimmers of innovation again in traditional infrastructure stuff like compute network and storage. And so we can talk about that. I think it's actually very interesting to talk about, is now we're starting to see the innovation come back out of the cloud and be exposed to more. So we're entering again, this cycle of innovation.

[00:17:30] Patrick: How will that happen? It's like up against a death star or something. Like facing these three big companies. What do you think the best entrepreneurs will do? Pick something like crazy specific and just go after a single thread? How do you think this innovation cycle will happen?

[00:17:43] Martin: All of these companies are like, very strong repeat founders and the companies are Mighty, Fly Out IO and Mosaic. So, what do these companies do? So Mighty is browser as a service. I don't know about you, but right now even as we speak, I probably have 30 tabs in my browser. My laptop goes slow. If you use Mighty all of that's offloaded and you get this crazy good experience, which is great for most of us, especially as the browser gets more workloads. What is Fly? Fly allows any developer to run compute workload at the CDN tier all across the world, which is important if you care about responsiveness to the users. And what is Mosaic? Mosaic is, basically machine learning as a service. So they provide the ability to run models very quickly for AI specific loads. So, what's unique about all three of these companies is all of them are doing their own hardware. They're looking to run servers, they're racking and stacking. And these are very, very strong founders.

All of them are repeat founders and all of these companies have great traction. So what is happening here? I think it's exactly what we've spoken about, which is there just are across the industry certain workloads that, if you look at that very specific workload, the cloud is just not optimized for them. And that provides room for the Mighty and Mosaics and Flies of the world to provide something that is a very attractive proof point or performance point or whatever it is, with respects to the clouds. And so I don't think the answer is we're going to see a lot of drop boxes, where the end customer builds their own data center. I do think we are seeing very concrete signs of third party companies coming in and providing cloud services that are just at a much better price point, or a much better performance point, or much more optimized for a workload. And because the cloud is growing to size, there's enough market now for solvent companies to do these. And so I think this is the very beginning, again, of a much bigger trend.

Building API and Open Source-First Companies
[00:19:33] Patrick: Can you say a bit about your view of what I'll call API first companies? Which I think a lot of people would include in this definition of digital infrastructure. If I can hire Stripe to be my payments processor by simply inserting a API into my software that I build and care about. And then there's one of these APIs that's proliferating for kind of everything. What do you see happening here? Is that infrastructure in your mind? Where does this fit into this equation?

[00:19:58] Martin: As markets grow, the unit to which you monetize gets more granular. And my favorite example of this, and it's one that may be a cliche but it's worth saying, is the car market. So, way back when in 1913, Ford had a factor called the Rouge River Factory. And this factory literally went in on one side, it was like water, rubber and coal. You know, and like iron ore, and what came out on the other side was cars. And the reason is there wasn't a sufficiently large market for cars to actually have suppliers. You couldn't be someone that provided wheels or whatever. And if you look at the car market now, I mean, there's companies that provide nuts and bolts and you've got multiple tiers of OEMs and integrators, et cetera, et cetera.

So the same thing has happened to systems historically. So in the 1970s, the same company would build literally the chip, the motherboard, the sheet metal, the operating system of all the apps. And then of course the OS got disaggregated from the hardware and then the apps got disaggregated from the OS. So now what's happening is the application itself is being disaggregated. You take any application, you blow it up and assume the market for this application or any application is so big that independent component of applications now can become companies.

So what does an application do? I mean, applications authenticate users, they need access controls, they need to send emails, they need to do payments. These are things that all applications can do. So it's almost like every help or library in an application is now becoming a company. So much so that I remember even five years ago, you drive up 101, the heart of Silicon valley in the Bay area, and you'd have billboards where the entire company was an API. PubNub, Sendgrid, you know, Twilio. And so this is a major movement where now you don't have to build a business app to build a company. And for an infrastructure person, this is super exciting because most of the founders I invest in are technical founders that are providing technical functions that are only useful to developers. And in the past, it was hard to build a business that way, but now you absolutely can.

If you're in tech at all, or you're an investor at all, I definitely think you should look at an application and assume that any sub-component does have the potential to now become a company, because the market is just so large.

[00:22:11] Patrick: What stage of that process do you think we are in? Twilio and Stripe, everyone knows turns out payments and sending messages. It's almost like the equivalent of storage and compute in application building. Where do you think we are in that process?

[00:22:25] Martin: I think we're still pretty early. I mean, on average, an application uses 17 external APIs. I think like a mobile app, something like that. But if you look at the use of libraries and open source and everything else, it's still incredibly high for people having to integrate external components and management operate themselves. I think that there's still a long way to go, especially as we get into kind of more complex things. So for example, every application often requires some sort of internal policy. Who can access what, or you know? And this is a very specific computer science problem. How do you build a language or a policy language that kind of accesses, that allows a third party to declare a set of rules and mitigates access to those rules? Like, this is a component in most programs that can be pulled out and turned into a company. There's a number of companies looking at that, that are just getting started.

[00:23:16] Patrick: When it comes to this developer facing tooling, there's this open source way of building and there's the more proprietary, closed source way of building. What have you learned about what works well in which domain? And then I'd love to also learn, like if you're an open source company versus not, what is more or less important as you think about product and go to market and everything like that?

[00:23:35] Martin: I'm starting to be of the opinion that as we move to SaaS and that's the primary way of consuming infrastructure, which it seems to be, that open source matters a lot less. And the reason I say that is, if I'm a developer and I'm writing an application and I need to authenticate my users and I need to authorize their access to things, and I need to send them emails or send them SMS texts or whatever, I have two options. I could download some open source package and then operate that, or I could just use an API that somebody else operates. The secular trend is I'm going to use the API that somebody else operates. And if I'm doing that, whether or not the code for that is open source, doesn't matter that much to me. So let's take the case of it is open source. So, even if it is open source, there is some value there. A lot of actual code to running that service has to do with the operations of the service. Like, how do you make sure that it's high availability? How do you debug it? How do you check for performance? Like, and that operations code is to be very specific to the actual service running. So it isn't even useful.

So that would never be open source anyway. So even if I had the source code, I couldn't really use it and operate it in the same way that somebody else could, or is running it. When it comes to dev tools, things that I am specifically using in my program as I develop, like that will always be open source and that's very important. But anything that's functional and offered as a service, I think the actual value of open source decreases. And what raises importance is actually open standards, which is, I still want be able to make sure that I'm not locked in to one and I can move between them, but that's not an open source argument. That's kind of an open standards argument. And so the role of open source has obviously shifted very, very quickly in the last 10 years, largely driven by this consumption with SaaS. And I think that we're getting a more nuanced view of where it's useful and where it's not. Whereas 10 years ago, there was this broad consensus that open source is great and it's going to take over the world. And that just doesn't seem to be the case in the way that we all thought.

[00:25:30] Patrick: So whether or not a company's open source based or not, what have you learned about successfully building relationships between a company and a big market of developers? Like, it's a very unique market to be marketing to or selling into. There's bottom up, there's top down. There's lots of ways to do it. Just generally, what should we know about developers as a buying class?

[00:25:51] Martin: This is still very much an early and evolving area. There's a number of truisms that everybody knows, but we're saying. So one of the truisms is developers can have more and more budget. Another truism is that traditional sales and marketing technique don't work for developers. Another truism is developers tend to be very opinionated and have strong identities and tend to create factions that localize around certain types of technologies and so forth. The best companies in developer space have really unlocked what it means to build communities of developers and this creates a tremendous amount of sensitivity to their problems, their workflows, their aesthetics, things like that.

So one area I'm personally very interested in is, how do you go from the art, which is develop the relationships, and it's very much an art? There is no rule book for how you do developer sales, even if there are rule books in our work. How do you get more visibility into that? We're seeing a number of interesting companies pop up. Orbit is one that I'm involved with, which like their entire goal is to help companies build developer ecosystems and then have some visibility into those so that it can kind of move more into a traditional motion. Like I said, I haven't been involved in this now for the last while. There's a lot for the industry to learn about that.

[00:27:08] Patrick: Can you say a little bit about the difference between a front end and backend developer and what you think is changing in that relationship or set of responsibilities? It's an interesting one.

[00:27:19] Martin: We use the term "developer" like there's this generic developer out there, which is not the case. There's a number of ways you can classify them. One way that I think that's particularly useful is the difference between a backend or a front end developer. So, backend developers tend to be like system folks like I used to be. They build big, distributed systems, they build infrastructure. It's less specific business logic. It's almost like a service operation to the front end developers who are building like, the user experience. So the back end is you're building some heavy data platform or compute platform or whatever. And front end developers are actually developing the UI and the logic that's facing the customer.

And in the past, the view was the front-end developers was mostly about presentation and user experience, and a lot of the work was backend. What's very interesting is, there's probably, I don't know, 100 frontend developers for every backend developer. So what we're seeing is frontend developers slowly consuming more and more of the stack. And this has broad implications on the type of people that are frontend developers, it has big implications on the type of infrastructure that supports them. The big trend we're seeing is frontend developers are now doing more and more of the application, which has naturally resulted in atrophy of the backend. But that's the distinction that... A very helpful distinction to make. And this one, certainly we make on the investing side, because it does dictate a log of what technologies get adopted where, and who needs what.

Evaluating Digital Infrastructure Businesses
[00:28:41] Patrick: Going back to this notion of, so if they're the consumers of these APIs or little pieces of infrastructure, I absolutely love the Ford factory example, and what happens as it matures, that it's so clean. What do you look for as an investor when you are seeing one of these, let's say API forward or first companies for the first time? What is your method of investigation? How are you processing a new company?

[00:29:03] Martin: So throughout this all together, we talked about a trend. So there's a lot of frontend developers. We talked about probably 100 to everyone backend. And those frontend developers, they're building more and more of the application. So in the past, they had to... Were very tied to the backend more and more. Instead of having their own backend, they can use it an API from a third party company. Let's say they're using 20 little SMS or whatever. The interesting thing about these API companies that offer to the frontend is that the unit of consumption really is like a function call or an API call. So they almost have these consumer-like dynamics. So the primary evaluation criteria, to answer your question, and why it's so different, in the past, if you're going to evaluate a server company, who's the buyer, what's the go-to market motion, what's the ACV.

You talked to a bunch of the buyers, you'd see if they can build the technology, et cetera. Now, with these API companies, you literally just can look at what the usage graphs are, how many users, how do they monetize them, et cetera, and it's become much more of a bottoms-up, or SAS, or consumer type profile. So we stopped a lot of that approach to investing when evaluating these companies. It's much less about can they build it, who's the buyer, and it's much more about how they use it in a practice, then it'd very interesting. A lot of these companies, they do. They've got these beautiful growth patterns, just like you're looking at the next WhatsApp. They really are almost consumer-like phenomena.

[00:30:27] Patrick: What would be the most common red flags or disqualifying observations if you're investigating one of these companies beyond lack of that nice looking usage or engagement?

[00:30:39] Martin: Well, I'll tell you what I've gotten wrong. I do come from the older era where you actually evaluate the technology, you have a thesis on go to market. Often, we've seen these companies come in and they've got these beautiful usage graphs. They haven't monetized yet, but we're like, "Oh well, who's going to pay for this?" Or this is just developers, like whatever. And then we kind of talk ourselves out of the deal, because we know the market better than the founder. And in almost every case, I've regretted that because the reality is, and this is an internal thesis of ours, is the graph in almost every case is just smarter than our theorying. The market actually knows what it wants.

These days, if one of these API companies is doing very well and the usage is great, I'll give you an example, Hugging Face is a phenomenal company. And if you looked early on at the usage, this thing is a rocket ship, and you can have a bazillion theories why you can't monetize the model, and you have a bazillion theories of why their go-to market is going to work. But the reality is the market loves it, it's a great company. For me, it's almost like a counter thing, which is, I do think that this API makes life a lot easier. You don't have to have a grand unified theory about how things work, because you can literally just look at how this thing's being consumed, because the consumptions become so bite-size; you get a lot of early signals. I think it really boils down to...

[00:31:53] Patrick: It comes down to usage.

[00:31:55] Martin: Yeah, to usage.

[00:31:56] Patrick: How should these things be priced? What have you learned about actually building the revenue model around something that looks more usage based? All these examples, AWS, what we started with, these API companies, they tend to be usage-based pricing. So what have you learned about that? Is that the right thing? Do you think that changes?

[00:32:12] Martin: It feels to me though, apps are for seat pricing, and infrastructure is usage pricing, and that's basically how it is. And if you're in the frontend, you're not doing usage pricing, you better get there. You really have to. And if you're apps, and you can get away from seat pricing, that just seems like that's where you'll end up. I do feel that when it comes to company building, there's a few areas where there's no simple answers. There's a lot of stuff that's systematic, like how do you hire your sales force, it's pretty systematic. How do you create your org is systematic. But one of the things that's just not systematic is pricing. Pricing is actually dictated by the shape of the market and the shape of the product. And it takes months to get it right. I'll give you three mental landmarks, and I think the rest is just actual work.

So one of the mental landmarks is pricing is often fixed by the market. And so you should look at the ecosystem and the other types of companies and how they price and I think you should follow that model. For example, if you're building on top of Snowflake, how Snowflake charges is going to be very similar to how the customer expects to buy. And if you're building on top of that, you're going to want to align with that. And I've been in many cases where the companies wanted to innovate on their own pricing model, but the ecosystem alignment just wasn't there. And it was just painful until they had to change. I think another mental landmark is the market will tell you the price over time, but not initially. The less that you have public or the less that you force your opinion on, the better it is. I do think that a lot of early sales discussions is just to figure out pricing, that's what it is. Your goal is to reverse engineer how they think about that. The good news is because the consumption is so much higher on these, and the unit of consumption is lower, it's per API call, there's kind of a lot of room to experiment.

Breaking Down the Modern Data Stack
[00:33:45] Patrick: I'd love to move a little bit into some of the biggest reasons why all of this proliferation is happening, and the modern data world or modern data stack as it's commonly called in the investing circles is one really interesting place to dig in. And everyone's familiar with AI and ML and their importance in applications, and the exciting stuff around DALL·E and GPT-3 and all this kind of stuff. I would love to focus on the infrastructure portion of the modern data stack. Maybe just give us a little bit of a lesson, what is going on here? Why is this a theme with the name? What are the important parts of it?

[00:34:16] Martin: 10 years ago, the company comes in and they pitched their dog-walking company to you, or whatever. If you would have big questions on whether they could build it, whether it would scale, can they go international, you have lots of questions about their infrastructure. You don't ask those questions anymore because if anybody wants to build a website, even if one that's globally scaled, we've got the technologies to do that. So let's say in the case of dog-walking, let's say I am an investor and 10 companies come in and pitch the dog-walking company to me. In almost every case, the differentiation now between these types of companies has to do with how they handle data. How do I match dog-walkers to dogs? How do I do dynamic pricing? How do I do personalization? How do I run acquisition campaigns? We've moved as an industry to the businesses competing on how they use data, not how well they use software. I think it's a very, very big shift and it's actually very, very real. Again, even in just how we evaluate these companies. And so what we've seen to catch up is this dramatic improvement and maturation of tools to help with that.

Because if you look at the use of data in systems, it's very archaic relative to tools we have from software systems. So the modern data stack is just a catchphrase that folks use when it comes to modern tooling to help build these types of systems, ones where you can provide deep insights and real-time insights into running applications. And they're normally split in one of two ways. There's the analytics side, which is generally... Helps with human decisions, having a lot of data and doing dashboard. And then there's the AI/ML side where this becomes part of the application itself and provides real-time decisions. So just to throw out a few names, the modern data side is typically typified in the kind of AIML of the world, like Databricks is a keystone company, and there's an entire ecosystem around that. In the analytics, you've got BigQuery Redshift and Snowflake has tended to be. For ETL, you've got dbt and Fivetran. So these are kind of modern companies using modern approaches around this to address this shift. But it's all converging now. Where it used to be analytics and AI all were separate, they're all converging now. So we're actually seeing, I think one of the greatest battles for technical supremacy playing off right before our eyes in the modern data stack, as the tools mature.

[00:36:31] Patrick: Maybe to double-click on a couple of examples just to bring them to life, Snowflake is one that we've had Slootman on the show. It's a very popular stock, not just company. Main Street's familiar with it because it's a great business story. So what does something like Snowflake do for its users and why is this unable to explode with the sort of growth that it has?

[00:36:50] Martin: So before, you just did not have... The industry did not have a solution that was cost effective to throw all your data into. You had to buy tera data or these big data warehouses. They're very expensive, you're buying hardware. And what they did is they basically offered a cloud service which allows you to throw all of your data, and it's cheap enough that you can throw it all there and keep it in there. Snowflake is the independent company, like Redshift from Amazon is larger and started this. Then BigQuery is also a phenomenal company. So all three of these companies provide that. You actually can treat data almost like this resource that you can continue to come back to as an organization or as an application, rather than something that is outside that you've got to process once, because it's so expensive, and then bring in later.

[00:37:34] Patrick: Are there primitives in this world, maybe it's ETL or something similar to the primitives in the cloud world that we talked about before that you think of as the core use cases or uses or whatever you want to call them?

[00:37:44] Martin: So on the operational AINL, it's the model where you want your application to be able to make decisions, and those decisions, rather than being something somebody coded, it's the product of analyzing data.

[00:37:56] Patrick: It's a prediction, the model prediction.

[00:37:58] Martin: A Model prediction, but importantly, it's based on analyzing data rather than Martine sitting down and writing a number of rules or something like that. And so that's very much primitive and these are used for things like fraud detection, or pricing, all the things that we know of. And then the entire tool change to create that, the entire workflow to create that is becoming a standard primitive. Also, the data pipeline which creates these models. So from the sources of the data, all the way to the workflow to create their models is becoming a primitive. And this is kind of where ELT comes in. You've got these data sources, whether it's cars or old databases or people on websites. That always get synced into the data warehouse, they go through a set of transformation, features are pulled out and then you actually create models based on those. So I think that entire workflow, from data sources all the way to the models being served, are the primitives that are starting to evolve. But very importantly, this is so new, we're all still kind of trying to decide what piece is what, and what categories are going to emerge. And so, we're starting to get the glimpse of a stack forming. Part of our act of diligence every day is to try and figure out how exactly that's coming together.

[00:39:02] Patrick: We haven't talked at all about security as a pervasive theme or important function across all of this. People understand the importance of security, and it seems like if anything, this is going to be something that gets more and more important as more stuff is put into digital sphere. What has been the history of securing all of this? And what is most interesting to you as an investor as you think about the future of digital security?

[00:39:26] Martin: Security has always been a very tough one for me, because it's been a very fragmented market... Impacts everything. One thing that's for sure is that security itself is also becoming an API, like we had talked about, and it's becoming something that's endemic to the building of applications. Xero is a great example of this, where authentication is something. We're seeing this for policy, which I meant. We're seeing this for data integrity and data management. So I view the movement very similar to the infrastructure in general, is it's becoming primitive and programs are starting to get stitched in, which is significantly different than what it was in the past, which is almost this afterthought, and it's a box or this application that you put in that watches everything else. I think it's becoming more intrinsic to the industry.

Exciting Possibilities Offered By Digital Infrastructure
[00:40:14] Patrick: And as you think about the ways that all of this intersects with the real world now, which we really haven't talked about. We basically talked about digital infrastructure that leads all the way up to applications at the top end, and the APIs in between and all this great stuff. But it seems also like as we mature, more of this technology will apply to the real world too, whether that's new kinds of hardware, whether that's intersection with physical goods like cars. How do you think about that side of things and maybe the hardware world of technology?

[00:40:45] Martin: People have a hard time grasping what, let's say, AI and ML concretely provide, because it's such a diluted buzzword. So for everybody that's listening, the important thing to realize is that what modern AI and ML does, which we've never really been able to do before in systems, is take unstructured data, and digitize it, and add it to the typical logic of the program. And we've never been able to do this with vision, like objects out in the real world. We've never been able to do this with natural language in the level of ASCII we can. We've never been able to do this with voice or speech.

That technology just hasn't existed and so we've never been able to build the big programs around them. And now we can, and it's a sufficiently different workload that two things happen. First, it pushes software into the realm of the physical world. We can now see things and interact with things. And we're talking quantum leaps of accuracy improvement. It also drives the type of hardware and software that we build, because the workload is so different, right? So we're seeing tons of innovation all the way down to the ASIC level. Mosaic as a company is building a data center focused just on this type of stuff. So I think that this really is a massive impact on infrastructure at large, not just the infrastructure, but also what sorts of applications software can go after.

[00:42:10] Patrick: It's very cool to consider what all that might mean. I mean like self-driving cars is like the obvious constant example of what computer vision might allow us to unlock. Obviously, cloud had this crazy impact on the services you consume. It's unlocked innovation by reducing friction. As you think about what's going on in the digital infrastructure world, period, what are you most excited about in terms of what it might unlock in the 2020s or over the next decade that maybe we're just starting to think about?

[00:42:38] Martin: Any problem that human beings go after that's been outside of the realm of software is currently in the realm of software. And this is farming, agriculture, oceanography, you name it. And so I am a tech optimist and tech maximalist. I think that part of our job is to solve problems. It has really been limited to IT, like information. And now I go from IT to just tech. You look at any industry, any industry at all, and I think that it'll be touched by this. That's, to me, just tremendously exciting. What's interesting, I would just say very quickly is we're still asking the question. Are these still software companies or something different? So you could say, this is just software going after agriculture. Now you still have a software business, or you could say this is still an agriculture business, or you could say it's something totally different. That's a question I'm personally very interested in.

[00:43:14] Patrick: If we think back to the people behind all these innovations, are there any things that you've learned about, I guess the first meeting, the first two meetings, the first three meetings for screening out people specifically and their potential to deliver against building one of these transformative technologies?

[00:43:48] Martin: Hardest thing about being a founder is just managing your own psychology. And a lot of that is you have to have this balance between diluting yourself enough to not run away streaming, but not diluting yourself so much that you'll run off a cliff. And this sounds like a very high level answer, but having lived this so significantly in my own startup and now living it with others, my biggest early sensitivities is, is the person tackling this optimistic enough to push you the hard times, but self-aware enough to know and realistic enough to know to make very practical decisions. I actually think that's the biggest balance for all of us.

[00:44:32] Patrick: How do you test that? How do you try to get a sense for that without having worked with them yet?

[00:44:35] Martin: Oh, there's two types of evaluations that you do on companies. One of them is all of these things come out in the state of the business. So if it's later stage company, you kind of don't have to. If it's a problem, it would've materialized. And I do believe that later stage investing can largely be relatively mechanical, like you should do the work, due diligence, do all the market work, this and that. Early on, I think free form discussion is just incredibly important because anything that's rehearsed is just not an indication of reality. So I personally just like to spend a fair bit of time talking about things. And often I like to talk about things that aren't actually the company itself. So I love to talk about experienced backgrounds, lessons learned. Probably my favorite line of inquiries, lessons learned, especially if we've got a shared background, like they work the company and know the company worked. They've at startup, and they know the startup. So I spend an inordinate amount of time there. And mostly what I'm looking for, I don't really care about right or wrong answers. I really do care about self-awareness. You know, an appreciation of the level of sophistication, the problems that are being solved.

How to Invest in an Uncertain Future
[00:45:34] Patrick: If you put your investor hat on, I guess your purely selfish investor hat, meaning you were just trying to maximize returns, and you could somehow have a crystal ball that would reveal some information about the future, which is currently uncertain, where if you knew what the future was going to hold, be super valuable to you as an investor, trying to earn a return. What would you ask of that crystal ball? Like what would you want to know about the future that you're not sure which way it will go?

[00:45:58] Martin: I am very curious about where crypto lands, and I think there are three potential views, right? On one end, on the most negative and barren folks are like, "This is all fake. It's just Ponzi scheme, yada yada, yada." On the extreme other end, it's a total reformation, not just of technology and companies, but an organization. This is like everything. You don't just have routers. You've got crypto routers. You don't have just storage. You have crypto storage. You don't just have businesses. You've got dos. You don't just have money. You've got DeFi, like everything changes. And then there's a bit of a middle view somewhere. This is a continuum which says, "You know what? There's something very innovative there on the ability to build networks. There's a number of primitives that are very innovative on the ability to build applications. There's a number of innovations on how you offer new services to consumers where you don't know the endpoints. There's a lot of great primitives, consumption to monetization layer, just like social was primarily a consumption monetization layer."

In that future, that layer is on top of a lot of systems, but you still have traditional computer networking and storage. You still have traditional clouds. You still have to know all of those things. And it's something that's added to that. And I think the answer to that question given the amount of money that's already involved is enormous. And I don't think anybody knows the answer. I tend to be in the middle where I think that there's a real innovation there. I think there's real value. I think it's a real unlock for a lot of new business applications and use cases. But I think that infrastructure itself, a lot of the traditional models still applies. You still have to build databases. You still have to use storage. You still have to understand the trade offs of asset. A lot of these things still apply.

[00:47:41] Patrick: Obviously distributed systems. Some of the smartest people in the world are working in distributed systems, not necessarily crypto networks, but just like the ability to distribute state or update state constantly faster, smoother, or whatever. As an infrastructure person, when you look at the current technology in crypto networks, maybe the dominant three or four, what are you watching or interested by or looking at, the consensus mechanisms, the scaling ability? What are the dimensions that you as an infrastructure person are keyed in on today?

[00:48:10] Martin: The crypto origin solves a very important problem. That's traditionally not been solved practically. And that is allowing basically an anonymous set of people with no prior trust relationship to have strong guarantees on something, right? Originally it was a ledger, and then it's become more to generalized compute. That's a very, very real innovation thing. And that unlocks very, very interesting business use cases like we've mentioned. But distributed systems is one of those things that you just can't paper over with a thin software layer. You can't hide it under an API. You've never been able to. There's entire languages that just help programmers manage distributed systems. What's important is what developers end up using, or what distributed paradigms they end up using, because that will drive the capabilities of the system. So if everybody says, "This is a purely distributed world and everything I write must be purely distributed," that will have some implications of the type of systems that you can build.

So the thing that I'm most interested in as kind of an old distributed systems guy is what are the nature of the applications? Is this going to land in the realm of purely distributed stuff? Is it only embarrassingly parallel applications, like DeFi is an embarrassingly parallel application? There's other things that are embarrasingly parallel. Or, is this going to go more to the model of general compute? Is that something people are going to do? Are people going to build like the AWS in crypto? The answer to that is actually very, very significant, right? You could say, "Well, listen, traditional distributor systems are great for building AWS, and this is going to just be the consumption monetization layer, or it actually is going to cause innovation in the way that we do distributed programming in the future." I don't think that's clear yet where that's going to land.

[00:49:54] Patrick: When I first had Chris on, maybe it was a year and a half ago now to talk about that left end of the spectrum. It's so compelling. There's so many aspects of it that sound like it will unlock so much. And it just seems like the pace has been frustratingly slow in terms of just actual outcomes. Do you think that's a fair characterization?

[00:50:13] Martin: There's the promise of crypto that's what it means to the users of crypto. And then there's the mechanism you use to get there. Those are two totally different things. And I think a lot of the promise is actually being realized. The amount of innovation, the amount of developers, the amount of platforms, I think that has been tremendously rapid and very exciting. But I think sometimes we conflate the innovation of crypto, what it means to the users and innovation with the actual mechanisms to get there. There's this grand conflation. And if you can get that with traditional mechanisms in combination with these newer innovations of distributed systems, I think it's still a win.

And that, to me, is the big question, like where does that land? So I believe that you're still going to have traditional switches and routers to make the internet. And then I believe that you're going to still have traditional storage layers and things like that for some large subset of the workload. And then there's going to be certain portions that are embarrassingly parallel. Now, Chris and Ali were on our crypto fund. They would say, "You know, Martin, like you can distribute all of those things and we're going to, and it's democratized. It's going to disrupt the traditional infrastructure." That very well may be the case. And again, sitting on the board of all these traditional infrastructure companies, I'll tell you, they're selling to all the crypto companies would suggest there's a lot of adoption of traditional infrastructure.

[00:51:32] Patrick: As we wrap up, step back and think just very big picture within the world of digital infrastructure kinds of companies, trends, et cetera. Where do you think your most bullish relative to maybe your peers and most bearish relative to your peers?

[00:51:46] Martin: Here's where I'm the most bullish? I think we're just getting started. I literally think that like infrastructure is basically the beginning and the end of technology. Honestly, I believe that the future like vertical SaaS ends up becoming horizontal thin layers on top of core infrastructure components. And if infrastructure unlocks the capability of these apps to do new things, I just feel like we're in early innings of this. I think we've got decades of massive, massive growth. And I think a lot of the value is that most of the value will accrue to the infrastructure. So I just think on the entire space, being hyper bullish. As far as being bearish, I tend to be the most skeptical that infrastructure businesses look like software businesses. AI businesses tend to look more like services businesses. I think infrastructure business tend to have lower margins. So I tend to be quite skeptical, not skeptical, but I tend to be a little bit more conservative on the actual profile of these.

[00:52:46] Patrick: Martin, this has been so much fun. I've learned a lot in our conversations just about how things are being built in the modern digital world, and all the guts matter a great deal. And I think I've done a nice job exploring those today. I ask everyone that I interview the same traditional closing question. What is the kindest thing that anyone's ever done for you?

[00:53:02] Martin: Oh man, my entire life has just been people taking big bets on me. You know, every major move has been someone taking a big bet on me. Every major positive inflection in my life. And this is from PhD to being invested in, to being hired. Whatever is someone taking a huge, huge bet on me and boy, I'll never forget that. I really think that major inflection points have been through the kindness of others, not through like any sort of skill of my own.

[00:53:28] Patrick: Fantastic. So many people say something like that, be a reminder to pay it forward. Martin, this has been so much fun. Thank you so much for your time.

[00:53:36] Martin: Thanks much.

This site uses cookies to improve your browsing experience. By using this site, you are consenting to this policy.
